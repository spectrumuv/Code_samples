give code to run a 1 cell 1 ue lte setup sending 5 packets in ns3 c++
print statements in the terminal for when each packet is sent and source and destination ip address

sample_simulator.cc

#include "ns3/command-line.h"
#include "ns3/double.h"
#include "ns3/nstime.h"
#include "ns3/random-variable-stream.h"
#include "ns3/simulator.h"

#include <iostream>

/**
 * \file
 * \ingroup core-examples
 * \ingroup simulator
 * Example program demonstrating use of various Schedule functions.
 */

using namespace ns3;

namespace
{

/** Simple model object to illustrate event handling. */
class MyModel
{
  public:
    /** Start model execution by scheduling a HandleEvent. */
    void Start();

  private:
    /**
     *  Simple event handler.
     *
     * \param [in] eventValue Event argument.
     */
    void HandleEvent(double eventValue);
};

void
MyModel::Start()
{
    Simulator::Schedule(Seconds(10.0), &MyModel::HandleEvent, this, Simulator::Now().GetSeconds());
}

void
MyModel::HandleEvent(double value)
{
    std::cout << "Member method received event at " << Simulator::Now().GetSeconds()
              << "s started at " << value << "s" << std::endl;
}

/**
 * Simple function event handler which Starts a MyModel object.
 *
 * \param [in] model The MyModel object to start.
 */
void
ExampleFunction(MyModel* model)
{
    std::cout << "ExampleFunction received event at " << Simulator::Now().GetSeconds() << "s"
              << std::endl;
    model->Start();
}

/**
 * Simple function event handler; this function is called randomly.
 */
void
RandomFunction()
{
    std::cout << "RandomFunction received event at " << Simulator::Now().GetSeconds() << "s"
              << std::endl;
}

/** Simple function event handler; the corresponding event is cancelled. */
void
CancelledEvent()
{
    std::cout << "I should never be called... " << std::endl;
}

} // unnamed namespace

int
main(int argc, char* argv[])
{
    CommandLine cmd(__FILE__);
    cmd.Parse(argc, argv);

    MyModel model;
    Ptr<UniformRandomVariable> v = CreateObject<UniformRandomVariable>();
    v->SetAttribute("Min", DoubleValue(10));
    v->SetAttribute("Max", DoubleValue(20));

    Simulator::Schedule(Seconds(10.0), &ExampleFunction, &model);

    Simulator::Schedule(Seconds(v->GetValue()), &RandomFunction);

    EventId id = Simulator::Schedule(Seconds(30.0), &CancelledEvent);
    Simulator::Cancel(id);

    Simulator::Schedule(Seconds(25.0), []() {
        std::cout << "Code within a lambda expression at time " << Simulator::Now().As(Time::S)
                  << std::endl;
    });

    Simulator::Run();

    Simulator::Destroy();

    return 0;
}

log-example.cc


/** File-local context string */
#define NS_LOG_APPEND_CONTEXT                                                                      \
    {                                                                                              \
        std::clog << "(local context) ";                                                           \
    }

#include "ns3/core-module.h"
#include "ns3/network-module.h"

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("LogExample");

/**
 * Unnamed namespace for log-example.cc
 */
namespace
{

/** A free function with logging. */
void
FreeEvent()
{
    NS_LOG_FUNCTION_NOARGS();

    NS_LOG_ERROR("FreeEvent: error msg");
    NS_LOG_WARN("FreeEvent: warning msg");
    NS_LOG_INFO("FreeEvent: info msg");
    NS_LOG_LOGIC("FreeEvent: logic msg");
    NS_LOG_DEBUG("FreeEvent: debug msg");
}

/** Simple object to aggregate to a node.
 * This helps demonstrate the logging node prefix.
 */

class MyEventObject : public Object
{
  public:
    /**
     * \brief Get the type ID.
     * \return the object TypeId
     */
    static TypeId GetTypeId()
    {
        static TypeId tid =
            TypeId("MyEventObject").SetParent<Object>().AddConstructor<MyEventObject>();
        return tid;
    }

    /** Constructor. */
    MyEventObject()
    {
        NS_LOG_FUNCTION(this);
    }

    /** Destructor. */
    ~MyEventObject() override
    {
        NS_LOG_FUNCTION(this);
    }

    /** Class member function with logging. */
    void Event()
    {
        NS_LOG_FUNCTION(this);

        NS_LOG_ERROR("MyEventObject:Event: error msg");
        NS_LOG_WARN("MyEventObject:Event: warning msg");
        NS_LOG_INFO("MyEventObject:Event: info msg");
        NS_LOG_LOGIC("MyEventObject:Event: logic msg");
        NS_LOG_DEBUG("MyEventObject:Event: debug msg");
    }

}; // MyEventObject

NS_OBJECT_ENSURE_REGISTERED(MyEventObject);

} // Unnamed namespace

int
main(int argc, char** argv)
{
    CommandLine cmd;
    cmd.Parse(argc, argv);

    NS_LOG_DEBUG("Creating a Node");
    auto node = CreateObject<Node>();

    NS_LOG_DEBUG("Creating MyEventObject");
    auto myObj = CreateObject<MyEventObject>();

    NS_LOG_DEBUG("Aggregating MyEventObject to Node");
    node->AggregateObject(myObj);

    NS_LOG_INFO("Scheduling the MyEventObject::Event with node context");
    Simulator::ScheduleWithContext(node->GetId(), Seconds(3), &MyEventObject::Event, &(*myObj));

    NS_LOG_INFO("Scheduling FreeEvent");
    Simulator::Schedule(Seconds(5), FreeEvent);

    NS_LOG_DEBUG("Starting run...");
    Simulator::Run();
    NS_LOG_DEBUG("... run complete");
    Simulator::Destroy();
    NS_LOG_DEBUG("Goodbye");

    return 0;
}

