/*#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/log.h"
#include<iostream>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("SingleCellSingleUe");

void TxPacketTrace(std::string context, Ptr<const Packet> packet) {
    std::cout<<Simulator::Now().GetSeconds()<<"s: Packet transmitted from "<<context<<std::endl;
}

void RxPacketTrace(std::string context, Ptr<const Packet> packet) {
    std::cout<<Simulator::Now().GetSeconds()<<"s: Packet received at "<<context<<std::endl;
}

int main(int argc, char *argv[]) {

    LogComponentEnable("SingleCellSingleUe", LOG_LEVEL_INFO);
    LogComponentEnable("LteHelper", LOG_LEVEL_INFO);
    LogComponentEnable("UdpClient", LOG_LEVEL_INFO);
    LogComponentEnable("UdpServer", LOG_LEVEL_INFO);
    LogComponentEnable("LteUePhy", LOG_LEVEL_INFO);
    LogComponentEnable("LteEnbPhy", LOG_LEVEL_INFO);
    LogComponentEnable("LteUeMac", LOG_LEVEL_INFO);
    LogComponentEnable("LteEnbMac", LOG_LEVEL_INFO);

    Ptr<LteHelper> lteHelper = CreateObject<LteHelper>();

    NodeContainer enbNodes, ueNodes;
    enbNodes.Create(1);
    ueNodes.Create(1);

    MobilityHelper mobility;

    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");

    mobility.Install(enbNodes);
    mobility.Install(ueNodes);

    Ptr<MobilityModel> enbMobility = enbNodes.Get(0)->GetObject<MobilityModel>();
    enbMobility->SetPosition(Vector(0.0,0.0,0.0));

    Ptr<MobilityModel> ueMobility = ueNodes.Get(0)->GetObject<MobilityModel>();
    ueMobility->SetPosition(Vector(100.0,0.0,0.0));
 
    NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice(enbNodes);
    NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice(ueNodes);

    lteHelper->Attach(ueLteDevs.Get(0), enbLteDevs.Get(0));

    InternetStackHelper internet;
    internet.Install(ueNodes);
    internet.Install(enbNodes);

    Ipv4AddressHelper ipv4;
    ipv4.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer ueIpIface = ipv4.Assign(ueLteDevs);

    uint16_t port = 9;
    UdpServerHelper udpServer(port);
    ApplicationContainer serverApp = udpServer.Install(ueNodes.Get(0));
    serverApp.Start(Seconds(1.0));
    serverApp.Stop(Seconds(10.0));

    UdpClientHelper udpClient(ueIpIface.GetAddress(0),port);
    udpClient.SetAttribute("MaxPackets", UintegerValue(1));
    udpClient.SetAttribute("Interval", TimeValue(MilliSeconds(10)));
    udpClient.SetAttribute("PacketSize", UintegerValue(512));

    ApplicationContainer clientApp = udpClient.Install(enbNodes.Get(0));
    clientApp.Start(Seconds(2.0));
    clientApp.Stop(Seconds(10.0));

    lteHelper->EnableTraces();
    
    ueLteDevs.Get(0)->TraceConnectWithoutContext("Tx", MakeCallback(&TxPacketTrace));
    enbLteDevs.Get(0)->TraceConnectWithoutContext("Rx", MakeCallback(&RxPacketTrace));

    Ptr<Node> ueNode = ueNodes.Get(0);
    Ptr<Ipv4> ipv4Device = ueNode->GetObject<Ipv4>();
    Ipv4Address addr = ipv4Device->GetAddress(1, 0).GetLocal();
    std::cout << "UE IP Address: " << addr << std::endl;

    Simulator::Stop(Seconds(10.0));
    Simulator::Run();
    Simulator::Destroy();

    return 0;
}*/

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/log.h"

#include <iostream>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("SingleCellSingleUe");

void TxPacketTrace(std::string context, Ptr<const Packet> packet) {
    std::cout << Simulator::Now().GetSeconds() << "s: Packet transmitted from " << context << std::endl;
}

void RxPacketTrace(std::string context, Ptr<const Packet> packet) {
    std::cout << Simulator::Now().GetSeconds() << "s: Packet received at " << context << std::endl;
}

int main(int argc, char *argv[]) {

    LogComponentEnable("SingleCellSingleUe", LOG_LEVEL_INFO);
    LogComponentEnable("LteHelper", LOG_LEVEL_INFO);
    LogComponentEnable("UdpClient", LOG_LEVEL_INFO);
    LogComponentEnable("UdpServer", LOG_LEVEL_INFO);
    LogComponentEnable("LteUePhy", LOG_LEVEL_INFO);
    LogComponentEnable("LteEnbPhy", LOG_LEVEL_INFO);
    LogComponentEnable("LteUeMac", LOG_LEVEL_INFO);
    LogComponentEnable("LteEnbMac", LOG_LEVEL_INFO);

    Ptr<LteHelper> lteHelper = CreateObject<LteHelper>();
    Ptr<PointToPointEpcHelper> epcHelper = CreateObject<PointToPointEpcHelper>();
    lteHelper->SetEpcHelper(epcHelper);

    Ptr<Node> pgw = epcHelper->GetPgwNode();

    NodeContainer enbNodes, ueNodes;
    enbNodes.Create(1);
    ueNodes.Create(1);

    MobilityHelper mobility;
    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobility.Install(enbNodes);
    mobility.Install(ueNodes);

    enbNodes.Get(0)->GetObject<MobilityModel>()->SetPosition(Vector(0.0, 0.0, 0.0));
    ueNodes.Get(0)->GetObject<MobilityModel>()->SetPosition(Vector(100.0, 0.0, 0.0));

    NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice(enbNodes);
    NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice(ueNodes);

    lteHelper->Attach(ueLteDevs.Get(0), enbLteDevs.Get(0));

    // Activate EPS Bearer with proper QoS parameters
    EpsBearer bearer(EpsBearer::NGBR_VIDEO_TCP_DEFAULT);
    lteHelper->ActivateDedicatedEpsBearer(ueLteDevs, bearer, EpcTft::Default());

    // Install Internet Stack
    InternetStackHelper internet;
    internet.Install(ueNodes);
    internet.Install(pgw);

    // Assign IP Addresses
    Ipv4AddressHelper ipv4;
    ipv4.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer ueIpIface = ipv4.Assign(ueLteDevs);

    Ptr<Node> ueNode = ueNodes.Get(0);
    Ptr<Ipv4> ueIpv4 = ueNode->GetObject<Ipv4>();
    Ipv4Address ueAddr = ueIpv4->GetAddress(1, 0).GetLocal();
    std::cout << "UE IP Address: " << ueAddr << std::endl;

    Ptr<Node> enbNode = enbNodes.Get(0);
    std::cout << "eNB Node ID: " << enbNode->GetId() << std::endl;

    // Setup Routing
    Ipv4StaticRoutingHelper ipv4RoutingHelper;
    Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting(ueIpv4);
    ueStaticRouting->SetDefaultRoute(epcHelper->GetPgwNode()->GetObject<Ipv4>()->GetAddress(1, 0).GetLocal(), 1);

    // UDP Server on UE
    uint16_t port = 9;
    UdpServerHelper udpServer(port);
    ApplicationContainer serverApp = udpServer.Install(ueNodes.Get(0));
    serverApp.Start(Seconds(1.0));
    serverApp.Stop(Seconds(10.0));

    // UDP Client on eNB
    UdpClientHelper udpClient(ueIpIface.GetAddress(0), port);
    udpClient.SetAttribute("MaxPackets", UintegerValue(5));
    udpClient.SetAttribute("Interval", TimeValue(MilliSeconds(500)));
    udpClient.SetAttribute("PacketSize", UintegerValue(512));

    ApplicationContainer clientApp = udpClient.Install(enbNodes.Get(0));
    clientApp.Start(Seconds(2.0));
    clientApp.Stop(Seconds(10.0));

    // Enable Tracing
    lteHelper->EnableTraces();
    ueLteDevs.Get(0)->TraceConnectWithoutContext("Tx", MakeCallback(&TxPacketTrace));
    enbLteDevs.Get(0)->TraceConnectWithoutContext("Rx", MakeCallback(&RxPacketTrace));

    Simulator::Stop(Seconds(10.0));
    Simulator::Run();
    Simulator::Destroy();

    return 0;
}

./ns3 run scratch/singlecell_singleue.cc
[0/2] Re-checking globbed directories...
[2/2] Linking CXX executable /mnt/c/Users/soumi.s/ns3project/ns-allinone-3.42/ns-3.42/build/scratch/ns3.42-singlecell_singleue-default
adding this eNB to the EPC
0x559ff22602a0 cellId=1 rnti=0 UePhy CELL_SEARCH --> SYNCHRONIZED
NS_ASSERT failed, cond="ueIpv4 || ueIpv6", msg="UEs need to have IPv4/IPv6 installed before EPS bearers can be activated", +0.000000000s -1 file=/mnt/c/Users/soumi.s/ns3project/ns-allinone-3.42/ns-3.42/src/lte/helper/no-backhaul-epc-helper.cc, line=480
NS_FATAL, terminating
terminate called without an active exception
Command 'build/scratch/ns3.42-singlecell_singleue-default' died with <Signals.SIGABRT: 6>.

give code after solving this
